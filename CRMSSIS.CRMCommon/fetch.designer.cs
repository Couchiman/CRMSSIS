// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.1.34438 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>CRMSSIS.CRMCommon.Fetch</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace CRMSSIS.CRMCommon.Fetch {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    
    
    [System.Runtime.Serialization.DataContractAttribute(Name="condition")]
    public partial class condition : System.ComponentModel.INotifyPropertyChanged {
        
        private List<conditionValue> itemsField;
        
        private string columnField;
        
        private string attributeField;
        
        private string entitynameField;
        
        private @operator operatorField;
        
        private string valueField;
        
        private AggregateType aggregateField;
        
        private bool aggregateFieldSpecified;
        
        private RowAggregateType rowaggregateField;
        
        private bool rowaggregateFieldSpecified;
        
        private string aliasField;
        
        private string uinameField;
        
        private string uitypeField;
        
        private TrueFalse01Type uihiddenField;
        
        private bool uihiddenFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public condition() {
            this.itemsField = new List<conditionValue>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<conditionValue> Items {
            get {
                return this.itemsField;
            }
            set {
                if ((this.itemsField != null)) {
                    if ((itemsField.Equals(value) != true)) {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string column {
            get {
                return this.columnField;
            }
            set {
                if ((this.columnField != null)) {
                    if ((columnField.Equals(value) != true)) {
                        this.columnField = value;
                        this.OnPropertyChanged("column");
                    }
                }
                else {
                    this.columnField = value;
                    this.OnPropertyChanged("column");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string attribute {
            get {
                return this.attributeField;
            }
            set {
                if ((this.attributeField != null)) {
                    if ((attributeField.Equals(value) != true)) {
                        this.attributeField = value;
                        this.OnPropertyChanged("attribute");
                    }
                }
                else {
                    this.attributeField = value;
                    this.OnPropertyChanged("attribute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string entityname {
            get {
                return this.entitynameField;
            }
            set {
                if ((this.entitynameField != null)) {
                    if ((entitynameField.Equals(value) != true)) {
                        this.entitynameField = value;
                        this.OnPropertyChanged("entityname");
                    }
                }
                else {
                    this.entitynameField = value;
                    this.OnPropertyChanged("entityname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public @operator @operator {
            get {
                return this.operatorField;
            }
            set {
                if ((operatorField.Equals(value) != true)) {
                    this.operatorField = value;
                    this.OnPropertyChanged("operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AggregateType aggregate {
            get {
                return this.aggregateField;
            }
            set {
                if ((aggregateField.Equals(value) != true)) {
                    this.aggregateField = value;
                    this.OnPropertyChanged("aggregate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool aggregateSpecified {
            get {
                return this.aggregateFieldSpecified;
            }
            set {
                if ((aggregateFieldSpecified.Equals(value) != true)) {
                    this.aggregateFieldSpecified = value;
                    this.OnPropertyChanged("aggregateSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RowAggregateType rowaggregate {
            get {
                return this.rowaggregateField;
            }
            set {
                if ((rowaggregateField.Equals(value) != true)) {
                    this.rowaggregateField = value;
                    this.OnPropertyChanged("rowaggregate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool rowaggregateSpecified {
            get {
                return this.rowaggregateFieldSpecified;
            }
            set {
                if ((rowaggregateFieldSpecified.Equals(value) != true)) {
                    this.rowaggregateFieldSpecified = value;
                    this.OnPropertyChanged("rowaggregateSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                if ((this.aliasField != null)) {
                    if ((aliasField.Equals(value) != true)) {
                        this.aliasField = value;
                        this.OnPropertyChanged("alias");
                    }
                }
                else {
                    this.aliasField = value;
                    this.OnPropertyChanged("alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string uiname {
            get {
                return this.uinameField;
            }
            set {
                if ((this.uinameField != null)) {
                    if ((uinameField.Equals(value) != true)) {
                        this.uinameField = value;
                        this.OnPropertyChanged("uiname");
                    }
                }
                else {
                    this.uinameField = value;
                    this.OnPropertyChanged("uiname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string uitype {
            get {
                return this.uitypeField;
            }
            set {
                if ((this.uitypeField != null)) {
                    if ((uitypeField.Equals(value) != true)) {
                        this.uitypeField = value;
                        this.OnPropertyChanged("uitype");
                    }
                }
                else {
                    this.uitypeField = value;
                    this.OnPropertyChanged("uitype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TrueFalse01Type uihidden {
            get {
                return this.uihiddenField;
            }
            set {
                if ((uihiddenField.Equals(value) != true)) {
                    this.uihiddenField = value;
                    this.OnPropertyChanged("uihidden");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool uihiddenSpecified {
            get {
                return this.uihiddenFieldSpecified;
            }
            set {
                if ((uihiddenFieldSpecified.Equals(value) != true)) {
                    this.uihiddenFieldSpecified = value;
                    this.OnPropertyChanged("uihiddenSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(condition));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current condition object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an condition object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output condition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out condition obj, out System.Exception exception) {
            exception = null;
            obj = default(condition);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out condition obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static condition Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((condition)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current condition object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an condition object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output condition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out condition obj, out System.Exception exception) {
            exception = null;
            obj = default(condition);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out condition obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static condition LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="conditionValue")]
    public partial class conditionValue : System.ComponentModel.INotifyPropertyChanged {
        
        private string uinameField;
        
        private string uitypeField;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string uiname {
            get {
                return this.uinameField;
            }
            set {
                if ((this.uinameField != null)) {
                    if ((uinameField.Equals(value) != true)) {
                        this.uinameField = value;
                        this.OnPropertyChanged("uiname");
                    }
                }
                else {
                    this.uinameField = value;
                    this.OnPropertyChanged("uiname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string uitype {
            get {
                return this.uitypeField;
            }
            set {
                if ((this.uitypeField != null)) {
                    if ((uitypeField.Equals(value) != true)) {
                        this.uitypeField = value;
                        this.OnPropertyChanged("uitype");
                    }
                }
                else {
                    this.uitypeField = value;
                    this.OnPropertyChanged("uitype");
                }
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("Value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(conditionValue));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current conditionValue object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an conditionValue object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output conditionValue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out conditionValue obj, out System.Exception exception) {
            exception = null;
            obj = default(conditionValue);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out conditionValue obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static conditionValue Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((conditionValue)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current conditionValue object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an conditionValue object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output conditionValue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out conditionValue obj, out System.Exception exception) {
            exception = null;
            obj = default(conditionValue);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out conditionValue obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static conditionValue LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public enum @operator {
        
        /// <remarks/>
        eq,
        
        /// <remarks/>
        neq,
        
        /// <remarks/>
        ne,
        
        /// <remarks/>
        gt,
        
        /// <remarks/>
        ge,
        
        /// <remarks/>
        le,
        
        /// <remarks/>
        lt,
        
        /// <remarks/>
        like,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not-like")]
        notlike,
        
        /// <remarks/>
        @in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not-in")]
        notin,
        
        /// <remarks/>
        between,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not-between")]
        notbetween,
        
        /// <remarks/>
        @null,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not-null")]
        notnull,
        
        /// <remarks/>
        yesterday,
        
        /// <remarks/>
        today,
        
        /// <remarks/>
        tomorrow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-seven-days")]
        lastsevendays,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-seven-days")]
        nextsevendays,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-week")]
        lastweek,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("this-week")]
        thisweek,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-week")]
        nextweek,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-month")]
        lastmonth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("this-month")]
        thismonth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-month")]
        nextmonth,
        
        /// <remarks/>
        on,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("on-or-before")]
        onorbefore,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("on-or-after")]
        onorafter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-year")]
        lastyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("this-year")]
        thisyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-year")]
        nextyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-x-hours")]
        lastxhours,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-x-hours")]
        nextxhours,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-x-days")]
        lastxdays,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-x-days")]
        nextxdays,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-x-weeks")]
        lastxweeks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-x-weeks")]
        nextxweeks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-x-months")]
        lastxmonths,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-x-months")]
        nextxmonths,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("olderthan-x-months")]
        olderthanxmonths,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("olderthan-x-years")]
        olderthanxyears,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("olderthan-x-weeks")]
        olderthanxweeks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("olderthan-x-days")]
        olderthanxdays,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("olderthan-x-hours")]
        olderthanxhours,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("olderthan-x-minutes")]
        olderthanxminutes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-x-years")]
        lastxyears,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-x-years")]
        nextxyears,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eq-userid")]
        equserid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ne-userid")]
        neuserid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eq-userteams")]
        equserteams,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eq-useroruserteams")]
        equseroruserteams,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eq-useroruserhierarchy")]
        equseroruserhierarchy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eq-useroruserhierarchyandteams")]
        equseroruserhierarchyandteams,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eq-businessid")]
        eqbusinessid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ne-businessid")]
        nebusinessid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eq-userlanguage")]
        equserlanguage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("this-fiscal-year")]
        thisfiscalyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("this-fiscal-period")]
        thisfiscalperiod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-fiscal-year")]
        nextfiscalyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-fiscal-period")]
        nextfiscalperiod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-fiscal-year")]
        lastfiscalyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-fiscal-period")]
        lastfiscalperiod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-x-fiscal-years")]
        lastxfiscalyears,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last-x-fiscal-periods")]
        lastxfiscalperiods,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-x-fiscal-years")]
        nextxfiscalyears,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("next-x-fiscal-periods")]
        nextxfiscalperiods,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in-fiscal-year")]
        infiscalyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in-fiscal-period")]
        infiscalperiod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in-fiscal-period-and-year")]
        infiscalperiodandyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in-or-before-fiscal-period-and-year")]
        inorbeforefiscalperiodandyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in-or-after-fiscal-period-and-year")]
        inorafterfiscalperiodandyear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("begins-with")]
        beginswith,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not-begin-with")]
        notbeginwith,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ends-with")]
        endswith,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not-end-with")]
        notendwith,
        
        /// <remarks/>
        under,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eq-or-under")]
        eqorunder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not-under")]
        notunder,
        
        /// <remarks/>
        above,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eq-or-above")]
        eqorabove,
    }
    
    public enum AggregateType {
        
        /// <remarks/>
        count,
        
        /// <remarks/>
        countcolumn,
        
        /// <remarks/>
        sum,
        
        /// <remarks/>
        avg,
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        max,
    }
    
    public enum RowAggregateType {
        
        /// <remarks/>
        countchildren,
    }
    
    public enum TrueFalse01Type {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="filter")]
    public partial class filter : System.ComponentModel.INotifyPropertyChanged {
        
        private List<object> itemsField;
        
        private filterType typeField;
        
        private bool isquickfindfieldsField;
        
        private bool isquickfindfieldsFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public filter() {
            this.itemsField = new List<object>();
            this.typeField = filterType.and;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                if ((this.itemsField != null)) {
                    if ((itemsField.Equals(value) != true)) {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(filterType.and)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public filterType type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isquickfindfields {
            get {
                return this.isquickfindfieldsField;
            }
            set {
                if ((isquickfindfieldsField.Equals(value) != true)) {
                    this.isquickfindfieldsField = value;
                    this.OnPropertyChanged("isquickfindfields");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isquickfindfieldsSpecified {
            get {
                return this.isquickfindfieldsFieldSpecified;
            }
            set {
                if ((isquickfindfieldsFieldSpecified.Equals(value) != true)) {
                    this.isquickfindfieldsFieldSpecified = value;
                    this.OnPropertyChanged("isquickfindfieldsSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(filter));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current filter object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an filter object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output filter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out filter obj, out System.Exception exception) {
            exception = null;
            obj = default(filter);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out filter obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static filter Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((filter)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current filter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an filter object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output filter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out filter obj, out System.Exception exception) {
            exception = null;
            obj = default(filter);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out filter obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static filter LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public enum filterType {
        
        /// <remarks/>
        and,
        
        /// <remarks/>
        or,
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="allattributes")]
    public partial class allattributes : System.ComponentModel.INotifyPropertyChanged {
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(allattributes));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current allattributes object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an allattributes object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output allattributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out allattributes obj, out System.Exception exception) {
            exception = null;
            obj = default(allattributes);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out allattributes obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static allattributes Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((allattributes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current allattributes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an allattributes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output allattributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out allattributes obj, out System.Exception exception) {
            exception = null;
            obj = default(allattributes);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out allattributes obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static allattributes LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="FetchType")]
    public partial class FetchType : System.ComponentModel.INotifyPropertyChanged {
        
        private List<object> itemsField;
        
        private string versionField;
        
        private string countField;
        
        private string pageField;
        
        private string pagingcookieField;
        
        private string utcoffsetField;
        
        private bool aggregateField;
        
        private bool aggregateFieldSpecified;
        
        private bool distinctField;
        
        private bool distinctFieldSpecified;
        
        private string topField;
        
        private FetchTypeMapping mappingField;
        
        private bool mappingFieldSpecified;
        
        private bool minactiverowversionField;
        
        private FetchTypeOutputformat outputformatField;
        
        private bool outputformatFieldSpecified;
        
        private bool returntotalrecordcountField;
        
        private bool nolockField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public FetchType() {
            this.itemsField = new List<object>();
            this.minactiverowversionField = false;
            this.returntotalrecordcountField = false;
            this.nolockField = false;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                if ((this.itemsField != null)) {
                    if ((itemsField.Equals(value) != true)) {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string version {
            get {
                return this.versionField;
            }
            set {
                if ((this.versionField != null)) {
                    if ((versionField.Equals(value) != true)) {
                        this.versionField = value;
                        this.OnPropertyChanged("version");
                    }
                }
                else {
                    this.versionField = value;
                    this.OnPropertyChanged("version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string count {
            get {
                return this.countField;
            }
            set {
                if ((this.countField != null)) {
                    if ((countField.Equals(value) != true)) {
                        this.countField = value;
                        this.OnPropertyChanged("count");
                    }
                }
                else {
                    this.countField = value;
                    this.OnPropertyChanged("count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string page {
            get {
                return this.pageField;
            }
            set {
                if ((this.pageField != null)) {
                    if ((pageField.Equals(value) != true)) {
                        this.pageField = value;
                        this.OnPropertyChanged("page");
                    }
                }
                else {
                    this.pageField = value;
                    this.OnPropertyChanged("page");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string pagingcookie {
            get {
                return this.pagingcookieField;
            }
            set {
                if ((this.pagingcookieField != null)) {
                    if ((pagingcookieField.Equals(value) != true)) {
                        this.pagingcookieField = value;
                        this.OnPropertyChanged("pagingcookie");
                    }
                }
                else {
                    this.pagingcookieField = value;
                    this.OnPropertyChanged("pagingcookie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string utcoffset {
            get {
                return this.utcoffsetField;
            }
            set {
                if ((this.utcoffsetField != null)) {
                    if ((utcoffsetField.Equals(value) != true)) {
                        this.utcoffsetField = value;
                        this.OnPropertyChanged("utcoffset");
                    }
                }
                else {
                    this.utcoffsetField = value;
                    this.OnPropertyChanged("utcoffset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool aggregate {
            get {
                return this.aggregateField;
            }
            set {
                if ((aggregateField.Equals(value) != true)) {
                    this.aggregateField = value;
                    this.OnPropertyChanged("aggregate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool aggregateSpecified {
            get {
                return this.aggregateFieldSpecified;
            }
            set {
                if ((aggregateFieldSpecified.Equals(value) != true)) {
                    this.aggregateFieldSpecified = value;
                    this.OnPropertyChanged("aggregateSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool distinct {
            get {
                return this.distinctField;
            }
            set {
                if ((distinctField.Equals(value) != true)) {
                    this.distinctField = value;
                    this.OnPropertyChanged("distinct");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool distinctSpecified {
            get {
                return this.distinctFieldSpecified;
            }
            set {
                if ((distinctFieldSpecified.Equals(value) != true)) {
                    this.distinctFieldSpecified = value;
                    this.OnPropertyChanged("distinctSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string top {
            get {
                return this.topField;
            }
            set {
                if ((this.topField != null)) {
                    if ((topField.Equals(value) != true)) {
                        this.topField = value;
                        this.OnPropertyChanged("top");
                    }
                }
                else {
                    this.topField = value;
                    this.OnPropertyChanged("top");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FetchTypeMapping mapping {
            get {
                return this.mappingField;
            }
            set {
                if ((mappingField.Equals(value) != true)) {
                    this.mappingField = value;
                    this.OnPropertyChanged("mapping");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool mappingSpecified {
            get {
                return this.mappingFieldSpecified;
            }
            set {
                if ((mappingFieldSpecified.Equals(value) != true)) {
                    this.mappingFieldSpecified = value;
                    this.OnPropertyChanged("mappingSpecified");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool minactiverowversion {
            get {
                return this.minactiverowversionField;
            }
            set {
                if ((minactiverowversionField.Equals(value) != true)) {
                    this.minactiverowversionField = value;
                    this.OnPropertyChanged("minactiverowversion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FetchTypeOutputformat outputformat {
            get {
                return this.outputformatField;
            }
            set {
                if ((outputformatField.Equals(value) != true)) {
                    this.outputformatField = value;
                    this.OnPropertyChanged("outputformat");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool outputformatSpecified {
            get {
                return this.outputformatFieldSpecified;
            }
            set {
                if ((outputformatFieldSpecified.Equals(value) != true)) {
                    this.outputformatFieldSpecified = value;
                    this.OnPropertyChanged("outputformatSpecified");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool returntotalrecordcount {
            get {
                return this.returntotalrecordcountField;
            }
            set {
                if ((returntotalrecordcountField.Equals(value) != true)) {
                    this.returntotalrecordcountField = value;
                    this.OnPropertyChanged("returntotalrecordcount");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool nolock {
            get {
                return this.nolockField;
            }
            set {
                if ((nolockField.Equals(value) != true)) {
                    this.nolockField = value;
                    this.OnPropertyChanged("nolock");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FetchType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FetchType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FetchType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FetchType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FetchType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FetchType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FetchType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FetchType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FetchType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FetchType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FetchType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FetchType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FetchType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FetchType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="FetchEntityType")]
    public partial class FetchEntityType : System.ComponentModel.INotifyPropertyChanged {
        
        private List<object> itemsField;
        
        private string nameField;
        
        private bool enableprefilteringField;
        
        private bool enableprefilteringFieldSpecified;
        
        private string prefilterparameternameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public FetchEntityType() {
            this.itemsField = new List<object>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                if ((this.itemsField != null)) {
                    if ((itemsField.Equals(value) != true)) {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool enableprefiltering {
            get {
                return this.enableprefilteringField;
            }
            set {
                if ((enableprefilteringField.Equals(value) != true)) {
                    this.enableprefilteringField = value;
                    this.OnPropertyChanged("enableprefiltering");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool enableprefilteringSpecified {
            get {
                return this.enableprefilteringFieldSpecified;
            }
            set {
                if ((enableprefilteringFieldSpecified.Equals(value) != true)) {
                    this.enableprefilteringFieldSpecified = value;
                    this.OnPropertyChanged("enableprefilteringSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string prefilterparametername {
            get {
                return this.prefilterparameternameField;
            }
            set {
                if ((this.prefilterparameternameField != null)) {
                    if ((prefilterparameternameField.Equals(value) != true)) {
                        this.prefilterparameternameField = value;
                        this.OnPropertyChanged("prefilterparametername");
                    }
                }
                else {
                    this.prefilterparameternameField = value;
                    this.OnPropertyChanged("prefilterparametername");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FetchEntityType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FetchEntityType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FetchEntityType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FetchEntityType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FetchEntityType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchEntityType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FetchEntityType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FetchEntityType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FetchEntityType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FetchEntityType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FetchEntityType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FetchEntityType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FetchEntityType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchEntityType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FetchEntityType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FetchEntityType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="FetchAttributeType")]
    public partial class FetchAttributeType : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private build buildField;
        
        private bool buildFieldSpecified;
        
        private string addedbyField;
        
        private string aliasField;
        
        private AggregateType aggregateField;
        
        private bool aggregateFieldSpecified;
        
        private FetchBoolType groupbyField;
        
        private bool groupbyFieldSpecified;
        
        private DateGroupingType dategroupingField;
        
        private bool dategroupingFieldSpecified;
        
        private FetchBoolType usertimezoneField;
        
        private bool usertimezoneFieldSpecified;
        
        private FetchBoolType distinctField;
        
        private bool distinctFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public build build {
            get {
                return this.buildField;
            }
            set {
                if ((buildField.Equals(value) != true)) {
                    this.buildField = value;
                    this.OnPropertyChanged("build");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool buildSpecified {
            get {
                return this.buildFieldSpecified;
            }
            set {
                if ((buildFieldSpecified.Equals(value) != true)) {
                    this.buildFieldSpecified = value;
                    this.OnPropertyChanged("buildSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string addedby {
            get {
                return this.addedbyField;
            }
            set {
                if ((this.addedbyField != null)) {
                    if ((addedbyField.Equals(value) != true)) {
                        this.addedbyField = value;
                        this.OnPropertyChanged("addedby");
                    }
                }
                else {
                    this.addedbyField = value;
                    this.OnPropertyChanged("addedby");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                if ((this.aliasField != null)) {
                    if ((aliasField.Equals(value) != true)) {
                        this.aliasField = value;
                        this.OnPropertyChanged("alias");
                    }
                }
                else {
                    this.aliasField = value;
                    this.OnPropertyChanged("alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AggregateType aggregate {
            get {
                return this.aggregateField;
            }
            set {
                if ((aggregateField.Equals(value) != true)) {
                    this.aggregateField = value;
                    this.OnPropertyChanged("aggregate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool aggregateSpecified {
            get {
                return this.aggregateFieldSpecified;
            }
            set {
                if ((aggregateFieldSpecified.Equals(value) != true)) {
                    this.aggregateFieldSpecified = value;
                    this.OnPropertyChanged("aggregateSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FetchBoolType groupby {
            get {
                return this.groupbyField;
            }
            set {
                if ((groupbyField.Equals(value) != true)) {
                    this.groupbyField = value;
                    this.OnPropertyChanged("groupby");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool groupbySpecified {
            get {
                return this.groupbyFieldSpecified;
            }
            set {
                if ((groupbyFieldSpecified.Equals(value) != true)) {
                    this.groupbyFieldSpecified = value;
                    this.OnPropertyChanged("groupbySpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DateGroupingType dategrouping {
            get {
                return this.dategroupingField;
            }
            set {
                if ((dategroupingField.Equals(value) != true)) {
                    this.dategroupingField = value;
                    this.OnPropertyChanged("dategrouping");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool dategroupingSpecified {
            get {
                return this.dategroupingFieldSpecified;
            }
            set {
                if ((dategroupingFieldSpecified.Equals(value) != true)) {
                    this.dategroupingFieldSpecified = value;
                    this.OnPropertyChanged("dategroupingSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FetchBoolType usertimezone {
            get {
                return this.usertimezoneField;
            }
            set {
                if ((usertimezoneField.Equals(value) != true)) {
                    this.usertimezoneField = value;
                    this.OnPropertyChanged("usertimezone");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool usertimezoneSpecified {
            get {
                return this.usertimezoneFieldSpecified;
            }
            set {
                if ((usertimezoneFieldSpecified.Equals(value) != true)) {
                    this.usertimezoneFieldSpecified = value;
                    this.OnPropertyChanged("usertimezoneSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FetchBoolType distinct {
            get {
                return this.distinctField;
            }
            set {
                if ((distinctField.Equals(value) != true)) {
                    this.distinctField = value;
                    this.OnPropertyChanged("distinct");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool distinctSpecified {
            get {
                return this.distinctFieldSpecified;
            }
            set {
                if ((distinctFieldSpecified.Equals(value) != true)) {
                    this.distinctFieldSpecified = value;
                    this.OnPropertyChanged("distinctSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FetchAttributeType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FetchAttributeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FetchAttributeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FetchAttributeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FetchAttributeType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchAttributeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FetchAttributeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FetchAttributeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FetchAttributeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FetchAttributeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FetchAttributeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FetchAttributeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FetchAttributeType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchAttributeType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FetchAttributeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FetchAttributeType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public enum build {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1.504021")]
        Item1504021,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1.003017")]
        Item1003017,
    }
    
    public enum FetchBoolType {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
    }
    
    public enum DateGroupingType {
        
        /// <remarks/>
        day,
        
        /// <remarks/>
        week,
        
        /// <remarks/>
        month,
        
        /// <remarks/>
        quarter,
        
        /// <remarks/>
        year,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fiscal-period")]
        fiscalperiod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fiscal-year")]
        fiscalyear,
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="FetchLinkEntityType")]
    public partial class FetchLinkEntityType : System.ComponentModel.INotifyPropertyChanged {
        
        private List<object> itemsField;
        
        private string nameField;
        
        private string toField;
        
        private string fromField;
        
        private string aliasField;
        
        private string linktypeField;
        
        private bool visibleField;
        
        private bool visibleFieldSpecified;
        
        private bool intersectField;
        
        private bool intersectFieldSpecified;
        
        private bool enableprefilteringField;
        
        private bool enableprefilteringFieldSpecified;
        
        private string prefilterparameternameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public FetchLinkEntityType() {
            this.itemsField = new List<object>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                if ((this.itemsField != null)) {
                    if ((itemsField.Equals(value) != true)) {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string to {
            get {
                return this.toField;
            }
            set {
                if ((this.toField != null)) {
                    if ((toField.Equals(value) != true)) {
                        this.toField = value;
                        this.OnPropertyChanged("to");
                    }
                }
                else {
                    this.toField = value;
                    this.OnPropertyChanged("to");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string from {
            get {
                return this.fromField;
            }
            set {
                if ((this.fromField != null)) {
                    if ((fromField.Equals(value) != true)) {
                        this.fromField = value;
                        this.OnPropertyChanged("from");
                    }
                }
                else {
                    this.fromField = value;
                    this.OnPropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                if ((this.aliasField != null)) {
                    if ((aliasField.Equals(value) != true)) {
                        this.aliasField = value;
                        this.OnPropertyChanged("alias");
                    }
                }
                else {
                    this.aliasField = value;
                    this.OnPropertyChanged("alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string linktype {
            get {
                return this.linktypeField;
            }
            set {
                if ((this.linktypeField != null)) {
                    if ((linktypeField.Equals(value) != true)) {
                        this.linktypeField = value;
                        this.OnPropertyChanged("linktype");
                    }
                }
                else {
                    this.linktypeField = value;
                    this.OnPropertyChanged("linktype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool visible {
            get {
                return this.visibleField;
            }
            set {
                if ((visibleField.Equals(value) != true)) {
                    this.visibleField = value;
                    this.OnPropertyChanged("visible");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool visibleSpecified {
            get {
                return this.visibleFieldSpecified;
            }
            set {
                if ((visibleFieldSpecified.Equals(value) != true)) {
                    this.visibleFieldSpecified = value;
                    this.OnPropertyChanged("visibleSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool intersect {
            get {
                return this.intersectField;
            }
            set {
                if ((intersectField.Equals(value) != true)) {
                    this.intersectField = value;
                    this.OnPropertyChanged("intersect");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool intersectSpecified {
            get {
                return this.intersectFieldSpecified;
            }
            set {
                if ((intersectFieldSpecified.Equals(value) != true)) {
                    this.intersectFieldSpecified = value;
                    this.OnPropertyChanged("intersectSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool enableprefiltering {
            get {
                return this.enableprefilteringField;
            }
            set {
                if ((enableprefilteringField.Equals(value) != true)) {
                    this.enableprefilteringField = value;
                    this.OnPropertyChanged("enableprefiltering");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool enableprefilteringSpecified {
            get {
                return this.enableprefilteringFieldSpecified;
            }
            set {
                if ((enableprefilteringFieldSpecified.Equals(value) != true)) {
                    this.enableprefilteringFieldSpecified = value;
                    this.OnPropertyChanged("enableprefilteringSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string prefilterparametername {
            get {
                return this.prefilterparameternameField;
            }
            set {
                if ((this.prefilterparameternameField != null)) {
                    if ((prefilterparameternameField.Equals(value) != true)) {
                        this.prefilterparameternameField = value;
                        this.OnPropertyChanged("prefilterparametername");
                    }
                }
                else {
                    this.prefilterparameternameField = value;
                    this.OnPropertyChanged("prefilterparametername");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FetchLinkEntityType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FetchLinkEntityType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FetchLinkEntityType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FetchLinkEntityType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FetchLinkEntityType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchLinkEntityType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FetchLinkEntityType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FetchLinkEntityType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FetchLinkEntityType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FetchLinkEntityType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FetchLinkEntityType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FetchLinkEntityType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FetchLinkEntityType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchLinkEntityType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FetchLinkEntityType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FetchLinkEntityType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="FetchOrderType")]
    public partial class FetchOrderType : System.ComponentModel.INotifyPropertyChanged {
        
        private List<object> itemsField;
        
        private string attributeField;
        
        private string aliasField;
        
        private bool descendingField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public FetchOrderType() {
            this.itemsField = new List<object>();
            this.descendingField = false;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                if ((this.itemsField != null)) {
                    if ((itemsField.Equals(value) != true)) {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string attribute {
            get {
                return this.attributeField;
            }
            set {
                if ((this.attributeField != null)) {
                    if ((attributeField.Equals(value) != true)) {
                        this.attributeField = value;
                        this.OnPropertyChanged("attribute");
                    }
                }
                else {
                    this.attributeField = value;
                    this.OnPropertyChanged("attribute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                if ((this.aliasField != null)) {
                    if ((aliasField.Equals(value) != true)) {
                        this.aliasField = value;
                        this.OnPropertyChanged("alias");
                    }
                }
                else {
                    this.aliasField = value;
                    this.OnPropertyChanged("alias");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool descending {
            get {
                return this.descendingField;
            }
            set {
                if ((descendingField.Equals(value) != true)) {
                    this.descendingField = value;
                    this.OnPropertyChanged("descending");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FetchOrderType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FetchOrderType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FetchOrderType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FetchOrderType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FetchOrderType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchOrderType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FetchOrderType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FetchOrderType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FetchOrderType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FetchOrderType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FetchOrderType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FetchOrderType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FetchOrderType obj, out System.Exception exception) {
            exception = null;
            obj = default(FetchOrderType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FetchOrderType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FetchOrderType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public enum FetchTypeMapping {
        
        /// <remarks/>
        @internal,
        
        /// <remarks/>
        logical,
    }
    
    public enum FetchTypeOutputformat {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("xml-ado")]
        xmlado,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("xml-auto")]
        xmlauto,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("xml-elements")]
        xmlelements,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("xml-raw")]
        xmlraw,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("xml-platform")]
        xmlplatform,
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedquery")]
    public partial class savedquery : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string savedqueryidField;
        
        private SerializedInteger returnedtypecodeField;
        
        private string descriptionField;
        
        private SerializedInteger querytypeField;
        
        private SerializedTrueFalse01Type isCustomizableField;
        
        private SerializedTrueFalse01Type canBeDeletedField;
        
        private string introducedVersionField;
        
        private SerializedTrueFalse01Type isquickfindqueryField;
        
        private SerializedTrueFalse01Type isuserdefinedField;
        
        private SerializedTrueFalse01Type isdefaultField;
        
        private bool isprivateField;
        
        private bool isprivateFieldSpecified;
        
        private string queryapiField;
        
        private savedqueryFetchxml fetchxmlField;
        
        private savedqueryColumnsetxml columnsetxmlField;
        
        private savedqueryLayoutxml layoutxmlField;
        
        private string donotuseinLCIDField;
        
        private string useinLCIDField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public savedquery() {
            this.layoutxmlField = new savedqueryLayoutxml();
            this.columnsetxmlField = new savedqueryColumnsetxml();
            this.fetchxmlField = new savedqueryFetchxml();
            this.isdefaultField = new SerializedTrueFalse01Type();
            this.isuserdefinedField = new SerializedTrueFalse01Type();
            this.isquickfindqueryField = new SerializedTrueFalse01Type();
            this.canBeDeletedField = new SerializedTrueFalse01Type();
            this.isCustomizableField = new SerializedTrueFalse01Type();
            this.querytypeField = new SerializedInteger();
            this.returnedtypecodeField = new SerializedInteger();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string savedqueryid {
            get {
                return this.savedqueryidField;
            }
            set {
                if ((this.savedqueryidField != null)) {
                    if ((savedqueryidField.Equals(value) != true)) {
                        this.savedqueryidField = value;
                        this.OnPropertyChanged("savedqueryid");
                    }
                }
                else {
                    this.savedqueryidField = value;
                    this.OnPropertyChanged("savedqueryid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SerializedInteger returnedtypecode {
            get {
                return this.returnedtypecodeField;
            }
            set {
                if ((this.returnedtypecodeField != null)) {
                    if ((returnedtypecodeField.Equals(value) != true)) {
                        this.returnedtypecodeField = value;
                        this.OnPropertyChanged("returnedtypecode");
                    }
                }
                else {
                    this.returnedtypecodeField = value;
                    this.OnPropertyChanged("returnedtypecode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((this.descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        this.descriptionField = value;
                        this.OnPropertyChanged("description");
                    }
                }
                else {
                    this.descriptionField = value;
                    this.OnPropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SerializedInteger querytype {
            get {
                return this.querytypeField;
            }
            set {
                if ((this.querytypeField != null)) {
                    if ((querytypeField.Equals(value) != true)) {
                        this.querytypeField = value;
                        this.OnPropertyChanged("querytype");
                    }
                }
                else {
                    this.querytypeField = value;
                    this.OnPropertyChanged("querytype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SerializedTrueFalse01Type IsCustomizable {
            get {
                return this.isCustomizableField;
            }
            set {
                if ((this.isCustomizableField != null)) {
                    if ((isCustomizableField.Equals(value) != true)) {
                        this.isCustomizableField = value;
                        this.OnPropertyChanged("IsCustomizable");
                    }
                }
                else {
                    this.isCustomizableField = value;
                    this.OnPropertyChanged("IsCustomizable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SerializedTrueFalse01Type CanBeDeleted {
            get {
                return this.canBeDeletedField;
            }
            set {
                if ((this.canBeDeletedField != null)) {
                    if ((canBeDeletedField.Equals(value) != true)) {
                        this.canBeDeletedField = value;
                        this.OnPropertyChanged("CanBeDeleted");
                    }
                }
                else {
                    this.canBeDeletedField = value;
                    this.OnPropertyChanged("CanBeDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IntroducedVersion {
            get {
                return this.introducedVersionField;
            }
            set {
                if ((this.introducedVersionField != null)) {
                    if ((introducedVersionField.Equals(value) != true)) {
                        this.introducedVersionField = value;
                        this.OnPropertyChanged("IntroducedVersion");
                    }
                }
                else {
                    this.introducedVersionField = value;
                    this.OnPropertyChanged("IntroducedVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SerializedTrueFalse01Type isquickfindquery {
            get {
                return this.isquickfindqueryField;
            }
            set {
                if ((this.isquickfindqueryField != null)) {
                    if ((isquickfindqueryField.Equals(value) != true)) {
                        this.isquickfindqueryField = value;
                        this.OnPropertyChanged("isquickfindquery");
                    }
                }
                else {
                    this.isquickfindqueryField = value;
                    this.OnPropertyChanged("isquickfindquery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SerializedTrueFalse01Type isuserdefined {
            get {
                return this.isuserdefinedField;
            }
            set {
                if ((this.isuserdefinedField != null)) {
                    if ((isuserdefinedField.Equals(value) != true)) {
                        this.isuserdefinedField = value;
                        this.OnPropertyChanged("isuserdefined");
                    }
                }
                else {
                    this.isuserdefinedField = value;
                    this.OnPropertyChanged("isuserdefined");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SerializedTrueFalse01Type isdefault {
            get {
                return this.isdefaultField;
            }
            set {
                if ((this.isdefaultField != null)) {
                    if ((isdefaultField.Equals(value) != true)) {
                        this.isdefaultField = value;
                        this.OnPropertyChanged("isdefault");
                    }
                }
                else {
                    this.isdefaultField = value;
                    this.OnPropertyChanged("isdefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isprivate {
            get {
                return this.isprivateField;
            }
            set {
                if ((isprivateField.Equals(value) != true)) {
                    this.isprivateField = value;
                    this.OnPropertyChanged("isprivate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isprivateSpecified {
            get {
                return this.isprivateFieldSpecified;
            }
            set {
                if ((isprivateFieldSpecified.Equals(value) != true)) {
                    this.isprivateFieldSpecified = value;
                    this.OnPropertyChanged("isprivateSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string queryapi {
            get {
                return this.queryapiField;
            }
            set {
                if ((this.queryapiField != null)) {
                    if ((queryapiField.Equals(value) != true)) {
                        this.queryapiField = value;
                        this.OnPropertyChanged("queryapi");
                    }
                }
                else {
                    this.queryapiField = value;
                    this.OnPropertyChanged("queryapi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public savedqueryFetchxml fetchxml {
            get {
                return this.fetchxmlField;
            }
            set {
                if ((this.fetchxmlField != null)) {
                    if ((fetchxmlField.Equals(value) != true)) {
                        this.fetchxmlField = value;
                        this.OnPropertyChanged("fetchxml");
                    }
                }
                else {
                    this.fetchxmlField = value;
                    this.OnPropertyChanged("fetchxml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public savedqueryColumnsetxml columnsetxml {
            get {
                return this.columnsetxmlField;
            }
            set {
                if ((this.columnsetxmlField != null)) {
                    if ((columnsetxmlField.Equals(value) != true)) {
                        this.columnsetxmlField = value;
                        this.OnPropertyChanged("columnsetxml");
                    }
                }
                else {
                    this.columnsetxmlField = value;
                    this.OnPropertyChanged("columnsetxml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public savedqueryLayoutxml layoutxml {
            get {
                return this.layoutxmlField;
            }
            set {
                if ((this.layoutxmlField != null)) {
                    if ((layoutxmlField.Equals(value) != true)) {
                        this.layoutxmlField = value;
                        this.OnPropertyChanged("layoutxml");
                    }
                }
                else {
                    this.layoutxmlField = value;
                    this.OnPropertyChanged("layoutxml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string donotuseinLCID {
            get {
                return this.donotuseinLCIDField;
            }
            set {
                if ((this.donotuseinLCIDField != null)) {
                    if ((donotuseinLCIDField.Equals(value) != true)) {
                        this.donotuseinLCIDField = value;
                        this.OnPropertyChanged("donotuseinLCID");
                    }
                }
                else {
                    this.donotuseinLCIDField = value;
                    this.OnPropertyChanged("donotuseinLCID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string useinLCID {
            get {
                return this.useinLCIDField;
            }
            set {
                if ((this.useinLCIDField != null)) {
                    if ((useinLCIDField.Equals(value) != true)) {
                        this.useinLCIDField = value;
                        this.OnPropertyChanged("useinLCID");
                    }
                }
                else {
                    this.useinLCIDField = value;
                    this.OnPropertyChanged("useinLCID");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedquery));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedquery object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedquery object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedquery object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedquery obj, out System.Exception exception) {
            exception = null;
            obj = default(savedquery);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedquery obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedquery Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedquery)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedquery object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedquery object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedquery object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedquery obj, out System.Exception exception) {
            exception = null;
            obj = default(savedquery);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedquery obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedquery LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="SerializedInteger")]
    public partial class SerializedInteger : System.ComponentModel.INotifyPropertyChanged {
        
        private string formattedvalueField;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string formattedvalue {
            get {
                return this.formattedvalueField;
            }
            set {
                if ((this.formattedvalueField != null)) {
                    if ((formattedvalueField.Equals(value) != true)) {
                        this.formattedvalueField = value;
                        this.OnPropertyChanged("formattedvalue");
                    }
                }
                else {
                    this.formattedvalueField = value;
                    this.OnPropertyChanged("formattedvalue");
                }
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute(DataType="nonNegativeInteger")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("Value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SerializedInteger));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SerializedInteger object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SerializedInteger object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SerializedInteger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SerializedInteger obj, out System.Exception exception) {
            exception = null;
            obj = default(SerializedInteger);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SerializedInteger obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SerializedInteger Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SerializedInteger)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SerializedInteger object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SerializedInteger object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SerializedInteger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SerializedInteger obj, out System.Exception exception) {
            exception = null;
            obj = default(SerializedInteger);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SerializedInteger obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SerializedInteger LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="SerializedTrueFalse01Type")]
    public partial class SerializedTrueFalse01Type : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private TrueFalse01Type valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TrueFalse01Type Value {
            get {
                return this.valueField;
            }
            set {
                if ((valueField.Equals(value) != true)) {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SerializedTrueFalse01Type));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SerializedTrueFalse01Type object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SerializedTrueFalse01Type object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SerializedTrueFalse01Type object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SerializedTrueFalse01Type obj, out System.Exception exception) {
            exception = null;
            obj = default(SerializedTrueFalse01Type);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SerializedTrueFalse01Type obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SerializedTrueFalse01Type Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SerializedTrueFalse01Type)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SerializedTrueFalse01Type object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SerializedTrueFalse01Type object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SerializedTrueFalse01Type object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SerializedTrueFalse01Type obj, out System.Exception exception) {
            exception = null;
            obj = default(SerializedTrueFalse01Type);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SerializedTrueFalse01Type obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SerializedTrueFalse01Type LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryFetchxml")]
    public partial class savedqueryFetchxml : System.ComponentModel.INotifyPropertyChanged {
        
        private FetchType fetchField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public savedqueryFetchxml() {
            this.fetchField = new FetchType();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FetchType fetch {
            get {
                return this.fetchField;
            }
            set {
                if ((this.fetchField != null)) {
                    if ((fetchField.Equals(value) != true)) {
                        this.fetchField = value;
                        this.OnPropertyChanged("fetch");
                    }
                }
                else {
                    this.fetchField = value;
                    this.OnPropertyChanged("fetch");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryFetchxml));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryFetchxml object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryFetchxml object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryFetchxml object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryFetchxml obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryFetchxml);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryFetchxml obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryFetchxml Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryFetchxml)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryFetchxml object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryFetchxml object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryFetchxml object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryFetchxml obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryFetchxml);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryFetchxml obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryFetchxml LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryColumnsetxml")]
    public partial class savedqueryColumnsetxml : System.ComponentModel.INotifyPropertyChanged {
        
        private savedqueryColumnsetxmlColumnset columnsetField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public savedqueryColumnsetxml() {
            this.columnsetField = new savedqueryColumnsetxmlColumnset();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public savedqueryColumnsetxmlColumnset columnset {
            get {
                return this.columnsetField;
            }
            set {
                if ((this.columnsetField != null)) {
                    if ((columnsetField.Equals(value) != true)) {
                        this.columnsetField = value;
                        this.OnPropertyChanged("columnset");
                    }
                }
                else {
                    this.columnsetField = value;
                    this.OnPropertyChanged("columnset");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryColumnsetxml));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryColumnsetxml object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryColumnsetxml object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxml object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryColumnsetxml obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxml);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryColumnsetxml obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryColumnsetxml Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryColumnsetxml)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryColumnsetxml object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryColumnsetxml object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxml object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxml obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxml);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxml obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryColumnsetxml LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryColumnsetxmlColumnset")]
    public partial class savedqueryColumnsetxmlColumnset : System.ComponentModel.INotifyPropertyChanged {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType> itemsElementNameField;
        
        private string versionField;
        
        private bool distinctField;
        
        private bool distinctFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public savedqueryColumnsetxmlColumnset() {
            this.itemsElementNameField = new List<ItemsChoiceType>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                if ((this.itemsField != null)) {
                    if ((itemsField.Equals(value) != true)) {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ItemsChoiceType> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                if ((this.itemsElementNameField != null)) {
                    if ((itemsElementNameField.Equals(value) != true)) {
                        this.itemsElementNameField = value;
                        this.OnPropertyChanged("ItemsElementName");
                    }
                }
                else {
                    this.itemsElementNameField = value;
                    this.OnPropertyChanged("ItemsElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string version {
            get {
                return this.versionField;
            }
            set {
                if ((this.versionField != null)) {
                    if ((versionField.Equals(value) != true)) {
                        this.versionField = value;
                        this.OnPropertyChanged("version");
                    }
                }
                else {
                    this.versionField = value;
                    this.OnPropertyChanged("version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool distinct {
            get {
                return this.distinctField;
            }
            set {
                if ((distinctField.Equals(value) != true)) {
                    this.distinctField = value;
                    this.OnPropertyChanged("distinct");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool distinctSpecified {
            get {
                return this.distinctFieldSpecified;
            }
            set {
                if ((distinctFieldSpecified.Equals(value) != true)) {
                    this.distinctFieldSpecified = value;
                    this.OnPropertyChanged("distinctSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryColumnsetxmlColumnset));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryColumnsetxmlColumnset object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryColumnsetxmlColumnset object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxmlColumnset object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryColumnsetxmlColumnset obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxmlColumnset);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryColumnsetxmlColumnset obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryColumnsetxmlColumnset Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryColumnsetxmlColumnset)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryColumnsetxmlColumnset object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryColumnsetxmlColumnset object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxmlColumnset object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxmlColumnset obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxmlColumnset);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxmlColumnset obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryColumnsetxmlColumnset LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryColumnsetxmlColumnsetColumn")]
    public partial class savedqueryColumnsetxmlColumnsetColumn : System.ComponentModel.INotifyPropertyChanged {
        
        private build buildField;
        
        private bool buildFieldSpecified;
        
        private string addedbyField;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public build build {
            get {
                return this.buildField;
            }
            set {
                if ((buildField.Equals(value) != true)) {
                    this.buildField = value;
                    this.OnPropertyChanged("build");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool buildSpecified {
            get {
                return this.buildFieldSpecified;
            }
            set {
                if ((buildFieldSpecified.Equals(value) != true)) {
                    this.buildFieldSpecified = value;
                    this.OnPropertyChanged("buildSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string addedby {
            get {
                return this.addedbyField;
            }
            set {
                if ((this.addedbyField != null)) {
                    if ((addedbyField.Equals(value) != true)) {
                        this.addedbyField = value;
                        this.OnPropertyChanged("addedby");
                    }
                }
                else {
                    this.addedbyField = value;
                    this.OnPropertyChanged("addedby");
                }
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("Value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryColumnsetxmlColumnsetColumn));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryColumnsetxmlColumnsetColumn object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryColumnsetxmlColumnsetColumn object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxmlColumnsetColumn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryColumnsetxmlColumnsetColumn obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxmlColumnsetColumn);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryColumnsetxmlColumnsetColumn obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryColumnsetxmlColumnsetColumn Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryColumnsetxmlColumnsetColumn)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryColumnsetxmlColumnsetColumn object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryColumnsetxmlColumnsetColumn object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxmlColumnsetColumn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxmlColumnsetColumn obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxmlColumnsetColumn);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxmlColumnsetColumn obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryColumnsetxmlColumnsetColumn LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryColumnsetxmlColumnsetFilter")]
    public partial class savedqueryColumnsetxmlColumnsetFilter : System.ComponentModel.INotifyPropertyChanged {
        
        private List<savedqueryColumnsetxmlColumnsetFilterCondition> conditionField;
        
        private string columnField;
        
        private @operator operatorField;
        
        private bool operatorFieldSpecified;
        
        private string valueField;
        
        private string typeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public savedqueryColumnsetxmlColumnsetFilter() {
            this.conditionField = new List<savedqueryColumnsetxmlColumnsetFilterCondition>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<savedqueryColumnsetxmlColumnsetFilterCondition> condition {
            get {
                return this.conditionField;
            }
            set {
                if ((this.conditionField != null)) {
                    if ((conditionField.Equals(value) != true)) {
                        this.conditionField = value;
                        this.OnPropertyChanged("condition");
                    }
                }
                else {
                    this.conditionField = value;
                    this.OnPropertyChanged("condition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string column {
            get {
                return this.columnField;
            }
            set {
                if ((this.columnField != null)) {
                    if ((columnField.Equals(value) != true)) {
                        this.columnField = value;
                        this.OnPropertyChanged("column");
                    }
                }
                else {
                    this.columnField = value;
                    this.OnPropertyChanged("column");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public @operator @operator {
            get {
                return this.operatorField;
            }
            set {
                if ((operatorField.Equals(value) != true)) {
                    this.operatorField = value;
                    this.OnPropertyChanged("operator");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool operatorSpecified {
            get {
                return this.operatorFieldSpecified;
            }
            set {
                if ((operatorFieldSpecified.Equals(value) != true)) {
                    this.operatorFieldSpecified = value;
                    this.OnPropertyChanged("operatorSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField != null)) {
                    if ((typeField.Equals(value) != true)) {
                        this.typeField = value;
                        this.OnPropertyChanged("type");
                    }
                }
                else {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryColumnsetxmlColumnsetFilter));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryColumnsetxmlColumnsetFilter object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryColumnsetxmlColumnsetFilter object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxmlColumnsetFilter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryColumnsetxmlColumnsetFilter obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxmlColumnsetFilter);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryColumnsetxmlColumnsetFilter obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryColumnsetxmlColumnsetFilter Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryColumnsetxmlColumnsetFilter)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryColumnsetxmlColumnsetFilter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryColumnsetxmlColumnsetFilter object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxmlColumnsetFilter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxmlColumnsetFilter obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxmlColumnsetFilter);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxmlColumnsetFilter obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryColumnsetxmlColumnsetFilter LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryColumnsetxmlColumnsetFilterCondition")]
    public partial class savedqueryColumnsetxmlColumnsetFilterCondition : System.ComponentModel.INotifyPropertyChanged {
        
        private string columnField;
        
        private @operator operatorField;
        
        private bool operatorFieldSpecified;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string column {
            get {
                return this.columnField;
            }
            set {
                if ((this.columnField != null)) {
                    if ((columnField.Equals(value) != true)) {
                        this.columnField = value;
                        this.OnPropertyChanged("column");
                    }
                }
                else {
                    this.columnField = value;
                    this.OnPropertyChanged("column");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public @operator @operator {
            get {
                return this.operatorField;
            }
            set {
                if ((operatorField.Equals(value) != true)) {
                    this.operatorField = value;
                    this.OnPropertyChanged("operator");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool operatorSpecified {
            get {
                return this.operatorFieldSpecified;
            }
            set {
                if ((operatorFieldSpecified.Equals(value) != true)) {
                    this.operatorFieldSpecified = value;
                    this.OnPropertyChanged("operatorSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("value");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryColumnsetxmlColumnsetFilterCondition));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryColumnsetxmlColumnsetFilterCondition object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryColumnsetxmlColumnsetFilterCondition object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxmlColumnsetFilterCondition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryColumnsetxmlColumnsetFilterCondition obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxmlColumnsetFilterCondition);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryColumnsetxmlColumnsetFilterCondition obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryColumnsetxmlColumnsetFilterCondition Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryColumnsetxmlColumnsetFilterCondition)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryColumnsetxmlColumnsetFilterCondition object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryColumnsetxmlColumnsetFilterCondition object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryColumnsetxmlColumnsetFilterCondition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxmlColumnsetFilterCondition obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryColumnsetxmlColumnsetFilterCondition);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryColumnsetxmlColumnsetFilterCondition obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryColumnsetxmlColumnsetFilterCondition LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    public enum ItemsChoiceType {
        
        /// <remarks/>
        ascend,
        
        /// <remarks/>
        column,
        
        /// <remarks/>
        descend,
        
        /// <remarks/>
        filter,
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryLayoutxml")]
    public partial class savedqueryLayoutxml : System.ComponentModel.INotifyPropertyChanged {
        
        private savedqueryLayoutxmlGrid gridField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public savedqueryLayoutxml() {
            this.gridField = new savedqueryLayoutxmlGrid();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public savedqueryLayoutxmlGrid grid {
            get {
                return this.gridField;
            }
            set {
                if ((this.gridField != null)) {
                    if ((gridField.Equals(value) != true)) {
                        this.gridField = value;
                        this.OnPropertyChanged("grid");
                    }
                }
                else {
                    this.gridField = value;
                    this.OnPropertyChanged("grid");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryLayoutxml));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryLayoutxml object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryLayoutxml object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryLayoutxml object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryLayoutxml obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryLayoutxml);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryLayoutxml obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryLayoutxml Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryLayoutxml)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryLayoutxml object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryLayoutxml object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryLayoutxml object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryLayoutxml obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryLayoutxml);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryLayoutxml obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryLayoutxml LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryLayoutxmlGrid")]
    public partial class savedqueryLayoutxmlGrid : System.ComponentModel.INotifyPropertyChanged {
        
        private savedqueryLayoutxmlGridRow rowField;
        
        private string nameField;
        
        private bool selectField;
        
        private string previewField;
        
        private string iconField;
        
        private string jumpField;
        
        private string objectField;
        
        private string disableInlineEditingField;
        
        private string iconrendererField;
        
        private string multilinerowsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public savedqueryLayoutxmlGrid() {
            this.rowField = new savedqueryLayoutxmlGridRow();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public savedqueryLayoutxmlGridRow row {
            get {
                return this.rowField;
            }
            set {
                if ((this.rowField != null)) {
                    if ((rowField.Equals(value) != true)) {
                        this.rowField = value;
                        this.OnPropertyChanged("row");
                    }
                }
                else {
                    this.rowField = value;
                    this.OnPropertyChanged("row");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool select {
            get {
                return this.selectField;
            }
            set {
                if ((selectField.Equals(value) != true)) {
                    this.selectField = value;
                    this.OnPropertyChanged("select");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string preview {
            get {
                return this.previewField;
            }
            set {
                if ((this.previewField != null)) {
                    if ((previewField.Equals(value) != true)) {
                        this.previewField = value;
                        this.OnPropertyChanged("preview");
                    }
                }
                else {
                    this.previewField = value;
                    this.OnPropertyChanged("preview");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string icon {
            get {
                return this.iconField;
            }
            set {
                if ((this.iconField != null)) {
                    if ((iconField.Equals(value) != true)) {
                        this.iconField = value;
                        this.OnPropertyChanged("icon");
                    }
                }
                else {
                    this.iconField = value;
                    this.OnPropertyChanged("icon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string jump {
            get {
                return this.jumpField;
            }
            set {
                if ((this.jumpField != null)) {
                    if ((jumpField.Equals(value) != true)) {
                        this.jumpField = value;
                        this.OnPropertyChanged("jump");
                    }
                }
                else {
                    this.jumpField = value;
                    this.OnPropertyChanged("jump");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string @object {
            get {
                return this.objectField;
            }
            set {
                if ((this.objectField != null)) {
                    if ((objectField.Equals(value) != true)) {
                        this.objectField = value;
                        this.OnPropertyChanged("object");
                    }
                }
                else {
                    this.objectField = value;
                    this.OnPropertyChanged("object");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string disableInlineEditing {
            get {
                return this.disableInlineEditingField;
            }
            set {
                if ((this.disableInlineEditingField != null)) {
                    if ((disableInlineEditingField.Equals(value) != true)) {
                        this.disableInlineEditingField = value;
                        this.OnPropertyChanged("disableInlineEditing");
                    }
                }
                else {
                    this.disableInlineEditingField = value;
                    this.OnPropertyChanged("disableInlineEditing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string iconrenderer {
            get {
                return this.iconrendererField;
            }
            set {
                if ((this.iconrendererField != null)) {
                    if ((iconrendererField.Equals(value) != true)) {
                        this.iconrendererField = value;
                        this.OnPropertyChanged("iconrenderer");
                    }
                }
                else {
                    this.iconrendererField = value;
                    this.OnPropertyChanged("iconrenderer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string multilinerows {
            get {
                return this.multilinerowsField;
            }
            set {
                if ((this.multilinerowsField != null)) {
                    if ((multilinerowsField.Equals(value) != true)) {
                        this.multilinerowsField = value;
                        this.OnPropertyChanged("multilinerows");
                    }
                }
                else {
                    this.multilinerowsField = value;
                    this.OnPropertyChanged("multilinerows");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryLayoutxmlGrid));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryLayoutxmlGrid object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryLayoutxmlGrid object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryLayoutxmlGrid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryLayoutxmlGrid obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryLayoutxmlGrid);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryLayoutxmlGrid obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryLayoutxmlGrid Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryLayoutxmlGrid)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryLayoutxmlGrid object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryLayoutxmlGrid object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryLayoutxmlGrid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryLayoutxmlGrid obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryLayoutxmlGrid);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryLayoutxmlGrid obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryLayoutxmlGrid LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryLayoutxmlGridRow")]
    public partial class savedqueryLayoutxmlGridRow : System.ComponentModel.INotifyPropertyChanged {
        
        private List<savedqueryLayoutxmlGridRowCell> cellField;
        
        private string nameField;
        
        private string idField;
        
        private string multiobjectidfieldField;
        
        private string layoutstyleField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public savedqueryLayoutxmlGridRow() {
            this.cellField = new List<savedqueryLayoutxmlGridRowCell>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<savedqueryLayoutxmlGridRowCell> cell {
            get {
                return this.cellField;
            }
            set {
                if ((this.cellField != null)) {
                    if ((cellField.Equals(value) != true)) {
                        this.cellField = value;
                        this.OnPropertyChanged("cell");
                    }
                }
                else {
                    this.cellField = value;
                    this.OnPropertyChanged("cell");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField != null)) {
                    if ((idField.Equals(value) != true)) {
                        this.idField = value;
                        this.OnPropertyChanged("id");
                    }
                }
                else {
                    this.idField = value;
                    this.OnPropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string multiobjectidfield {
            get {
                return this.multiobjectidfieldField;
            }
            set {
                if ((this.multiobjectidfieldField != null)) {
                    if ((multiobjectidfieldField.Equals(value) != true)) {
                        this.multiobjectidfieldField = value;
                        this.OnPropertyChanged("multiobjectidfield");
                    }
                }
                else {
                    this.multiobjectidfieldField = value;
                    this.OnPropertyChanged("multiobjectidfield");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string layoutstyle {
            get {
                return this.layoutstyleField;
            }
            set {
                if ((this.layoutstyleField != null)) {
                    if ((layoutstyleField.Equals(value) != true)) {
                        this.layoutstyleField = value;
                        this.OnPropertyChanged("layoutstyle");
                    }
                }
                else {
                    this.layoutstyleField = value;
                    this.OnPropertyChanged("layoutstyle");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryLayoutxmlGridRow));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryLayoutxmlGridRow object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryLayoutxmlGridRow object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryLayoutxmlGridRow object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryLayoutxmlGridRow obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryLayoutxmlGridRow);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryLayoutxmlGridRow obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryLayoutxmlGridRow Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryLayoutxmlGridRow)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryLayoutxmlGridRow object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryLayoutxmlGridRow object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryLayoutxmlGridRow object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryLayoutxmlGridRow obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryLayoutxmlGridRow);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryLayoutxmlGridRow obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryLayoutxmlGridRow LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="savedqueryLayoutxmlGridRowCell")]
    public partial class savedqueryLayoutxmlGridRowCell : System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string widthField;
        
        private string labelIdField;
        
        private string labelField;
        
        private string descField;
        
        private string ishiddenField;
        
        private string disableSortingField;
        
        private string disableMetaDataBindingField;
        
        private string cellTypeField;
        
        private string imageproviderwebresourceField;
        
        private string imageproviderfunctionnameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string width {
            get {
                return this.widthField;
            }
            set {
                if ((this.widthField != null)) {
                    if ((widthField.Equals(value) != true)) {
                        this.widthField = value;
                        this.OnPropertyChanged("width");
                    }
                }
                else {
                    this.widthField = value;
                    this.OnPropertyChanged("width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabelId {
            get {
                return this.labelIdField;
            }
            set {
                if ((this.labelIdField != null)) {
                    if ((labelIdField.Equals(value) != true)) {
                        this.labelIdField = value;
                        this.OnPropertyChanged("LabelId");
                    }
                }
                else {
                    this.labelIdField = value;
                    this.OnPropertyChanged("LabelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string label {
            get {
                return this.labelField;
            }
            set {
                if ((this.labelField != null)) {
                    if ((labelField.Equals(value) != true)) {
                        this.labelField = value;
                        this.OnPropertyChanged("label");
                    }
                }
                else {
                    this.labelField = value;
                    this.OnPropertyChanged("label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string desc {
            get {
                return this.descField;
            }
            set {
                if ((this.descField != null)) {
                    if ((descField.Equals(value) != true)) {
                        this.descField = value;
                        this.OnPropertyChanged("desc");
                    }
                }
                else {
                    this.descField = value;
                    this.OnPropertyChanged("desc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ishidden {
            get {
                return this.ishiddenField;
            }
            set {
                if ((this.ishiddenField != null)) {
                    if ((ishiddenField.Equals(value) != true)) {
                        this.ishiddenField = value;
                        this.OnPropertyChanged("ishidden");
                    }
                }
                else {
                    this.ishiddenField = value;
                    this.OnPropertyChanged("ishidden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string disableSorting {
            get {
                return this.disableSortingField;
            }
            set {
                if ((this.disableSortingField != null)) {
                    if ((disableSortingField.Equals(value) != true)) {
                        this.disableSortingField = value;
                        this.OnPropertyChanged("disableSorting");
                    }
                }
                else {
                    this.disableSortingField = value;
                    this.OnPropertyChanged("disableSorting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string disableMetaDataBinding {
            get {
                return this.disableMetaDataBindingField;
            }
            set {
                if ((this.disableMetaDataBindingField != null)) {
                    if ((disableMetaDataBindingField.Equals(value) != true)) {
                        this.disableMetaDataBindingField = value;
                        this.OnPropertyChanged("disableMetaDataBinding");
                    }
                }
                else {
                    this.disableMetaDataBindingField = value;
                    this.OnPropertyChanged("disableMetaDataBinding");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cellType {
            get {
                return this.cellTypeField;
            }
            set {
                if ((this.cellTypeField != null)) {
                    if ((cellTypeField.Equals(value) != true)) {
                        this.cellTypeField = value;
                        this.OnPropertyChanged("cellType");
                    }
                }
                else {
                    this.cellTypeField = value;
                    this.OnPropertyChanged("cellType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string imageproviderwebresource {
            get {
                return this.imageproviderwebresourceField;
            }
            set {
                if ((this.imageproviderwebresourceField != null)) {
                    if ((imageproviderwebresourceField.Equals(value) != true)) {
                        this.imageproviderwebresourceField = value;
                        this.OnPropertyChanged("imageproviderwebresource");
                    }
                }
                else {
                    this.imageproviderwebresourceField = value;
                    this.OnPropertyChanged("imageproviderwebresource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string imageproviderfunctionname {
            get {
                return this.imageproviderfunctionnameField;
            }
            set {
                if ((this.imageproviderfunctionnameField != null)) {
                    if ((imageproviderfunctionnameField.Equals(value) != true)) {
                        this.imageproviderfunctionnameField = value;
                        this.OnPropertyChanged("imageproviderfunctionname");
                    }
                }
                else {
                    this.imageproviderfunctionnameField = value;
                    this.OnPropertyChanged("imageproviderfunctionname");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(savedqueryLayoutxmlGridRowCell));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current savedqueryLayoutxmlGridRowCell object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an savedqueryLayoutxmlGridRowCell object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output savedqueryLayoutxmlGridRowCell object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out savedqueryLayoutxmlGridRowCell obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryLayoutxmlGridRowCell);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out savedqueryLayoutxmlGridRowCell obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static savedqueryLayoutxmlGridRowCell Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((savedqueryLayoutxmlGridRowCell)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current savedqueryLayoutxmlGridRowCell object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an savedqueryLayoutxmlGridRowCell object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output savedqueryLayoutxmlGridRowCell object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out savedqueryLayoutxmlGridRowCell obj, out System.Exception exception) {
            exception = null;
            obj = default(savedqueryLayoutxmlGridRowCell);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out savedqueryLayoutxmlGridRowCell obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static savedqueryLayoutxmlGridRowCell LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalizedNamesType")]
    public partial class LocalizedNamesType : System.ComponentModel.INotifyPropertyChanged {
        
        private List<FieldXmlFieldUIType> localizedNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LocalizedNamesType() {
            this.localizedNameField = new List<FieldXmlFieldUIType>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<FieldXmlFieldUIType> LocalizedName {
            get {
                return this.localizedNameField;
            }
            set {
                if ((this.localizedNameField != null)) {
                    if ((localizedNameField.Equals(value) != true)) {
                        this.localizedNameField = value;
                        this.OnPropertyChanged("LocalizedName");
                    }
                }
                else {
                    this.localizedNameField = value;
                    this.OnPropertyChanged("LocalizedName");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LocalizedNamesType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LocalizedNamesType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LocalizedNamesType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LocalizedNamesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LocalizedNamesType obj, out System.Exception exception) {
            exception = null;
            obj = default(LocalizedNamesType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LocalizedNamesType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LocalizedNamesType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LocalizedNamesType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LocalizedNamesType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LocalizedNamesType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LocalizedNamesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LocalizedNamesType obj, out System.Exception exception) {
            exception = null;
            obj = default(LocalizedNamesType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LocalizedNamesType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LocalizedNamesType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="FieldXmlFieldUIType")]
    public partial class FieldXmlFieldUIType : System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string descriptionField;
        
        private string languagecodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField != null)) {
                    if ((idField.Equals(value) != true)) {
                        this.idField = value;
                        this.OnPropertyChanged("id");
                    }
                }
                else {
                    this.idField = value;
                    this.OnPropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((this.descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        this.descriptionField = value;
                        this.OnPropertyChanged("description");
                    }
                }
                else {
                    this.descriptionField = value;
                    this.OnPropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string languagecode {
            get {
                return this.languagecodeField;
            }
            set {
                if ((this.languagecodeField != null)) {
                    if ((languagecodeField.Equals(value) != true)) {
                        this.languagecodeField = value;
                        this.OnPropertyChanged("languagecode");
                    }
                }
                else {
                    this.languagecodeField = value;
                    this.OnPropertyChanged("languagecode");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FieldXmlFieldUIType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FieldXmlFieldUIType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FieldXmlFieldUIType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FieldXmlFieldUIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FieldXmlFieldUIType obj, out System.Exception exception) {
            exception = null;
            obj = default(FieldXmlFieldUIType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FieldXmlFieldUIType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FieldXmlFieldUIType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FieldXmlFieldUIType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FieldXmlFieldUIType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FieldXmlFieldUIType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FieldXmlFieldUIType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FieldXmlFieldUIType obj, out System.Exception exception) {
            exception = null;
            obj = default(FieldXmlFieldUIType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FieldXmlFieldUIType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FieldXmlFieldUIType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="DescriptionsType")]
    public partial class DescriptionsType : System.ComponentModel.INotifyPropertyChanged {
        
        private List<FieldXmlFieldUIType> descriptionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public DescriptionsType() {
            this.descriptionField = new List<FieldXmlFieldUIType>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<FieldXmlFieldUIType> Description {
            get {
                return this.descriptionField;
            }
            set {
                if ((this.descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DescriptionsType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DescriptionsType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DescriptionsType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DescriptionsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DescriptionsType obj, out System.Exception exception) {
            exception = null;
            obj = default(DescriptionsType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DescriptionsType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DescriptionsType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DescriptionsType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DescriptionsType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DescriptionsType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DescriptionsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DescriptionsType obj, out System.Exception exception) {
            exception = null;
            obj = default(DescriptionsType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DescriptionsType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DescriptionsType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Name="ColorsType")]
    public partial class ColorsType : System.ComponentModel.INotifyPropertyChanged {
        
        private List<FieldXmlFieldUIType> colorField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ColorsType() {
            this.colorField = new List<FieldXmlFieldUIType>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<FieldXmlFieldUIType> Color {
            get {
                return this.colorField;
            }
            set {
                if ((this.colorField != null)) {
                    if ((colorField.Equals(value) != true)) {
                        this.colorField = value;
                        this.OnPropertyChanged("Color");
                    }
                }
                else {
                    this.colorField = value;
                    this.OnPropertyChanged("Color");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ColorsType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ColorsType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ColorsType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ColorsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ColorsType obj, out System.Exception exception) {
            exception = null;
            obj = default(ColorsType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ColorsType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ColorsType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ColorsType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ColorsType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ColorsType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ColorsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ColorsType obj, out System.Exception exception) {
            exception = null;
            obj = default(ColorsType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ColorsType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ColorsType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
